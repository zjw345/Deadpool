name: Manual Go Build and Release

on:
  workflow_dispatch:  # 手动触发
    inputs:
      version:
        description: '请输入版本号 (如 v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取所有分支

    - name: Get all branches
      run: |
        # 获取远程所有分支名
        BRANCHES=$(git ls-remote --heads origin | awk -F'/' '{print $NF}' | tr '\n' ' ')
        echo "BRANCHES=$BRANCHES" >> $GITHUB_ENV

    - name: Loop through branches and build
      shell: bash
      run: |
        # 设置唯一的 artifacts 目录
        ARTIFACTS_DIR=./release-artifacts-${GITHUB_RUN_ID}
        mkdir -p $ARTIFACTS_DIR

        for BRANCH in $BRANCHES; do
          echo "Building branch: $BRANCH"
          
          git checkout $BRANCH || { echo "Failed to checkout branch $BRANCH"; continue; }
          
          for OS in linux windows; do
            for ARCH in amd64 arm64; do
              echo "Building for OS: $OS, ARCH: $ARCH"
              
              SANITIZED_BRANCH=$(echo $BRANCH | sed 's/[^a-zA-Z0-9_-]/_/g')
              FILENAME=SockFinder-${SANITIZED_BRANCH}-${OS}-${ARCH}
              [[ $OS == "windows" ]] && FILENAME="${FILENAME}.exe"

              GOOS=$OS GOARCH=$ARCH go build -o $FILENAME . || { echo "Build failed for $OS/$ARCH on branch $BRANCH"; continue; }

              DEST_DIR=$ARTIFACTS_DIR/${OS}-${ARCH}
              mkdir -p $DEST_DIR
              mv $FILENAME $DEST_DIR/
            done
          done
        done

    - name: Archive binaries by OS and ARCH
      shell: bash
      run: |
        for OS in linux windows; do
          for ARCH in amd64 arm64; do
            DEST_DIR=$ARTIFACTS_DIR/${OS}-${ARCH}
            if [ -d "$DEST_DIR" ]; then
              tar -czf $ARTIFACTS_DIR/SockFinder-${OS}-${ARCH}.tar.gz -C $DEST_DIR .
            fi
          done
        done

        # 清理空目录
        find $ARTIFACTS_DIR -type d -empty -delete

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ runner.workspace }}/release-artifacts-${{ github.run_id }}/SockFinder-*.tar.gz  # 修复路径问题
        tag_name: ${{ inputs.version }}
        release_name: ${{ inputs.version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
