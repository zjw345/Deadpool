name: Manual Go Build and Release

on:
  workflow_dispatch:  # 手动触发
    inputs:
      version:
        description: '请输入版本号 (如 v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get all branches
      id: get-branches
      run: |
        BRANCHES=$(git ls-remote --heads origin | awk -F'/' '{print $NF}' | tr '\n' ' ')
        echo "BRANCHES=$BRANCHES" >> $GITHUB_ENV

    - name: Build binaries
      shell: bash
      run: |
        ARTIFACTS_DIR=./release-artifacts-${{ github.run_id }}
        mkdir -p $ARTIFACTS_DIR

        for BRANCH in $BRANCHES; do
          echo "Building branch: $BRANCH"
          git checkout $BRANCH || { echo "Failed to checkout branch $BRANCH"; continue; }
          
          OS=${{ matrix.os }}
          ARCH=${{ matrix.arch }}
          
          echo "Building for OS: $OS, ARCH: $ARCH"
          SANITIZED_BRANCH=$(echo $BRANCH | sed 's/[^a-zA-Z0-9_-]/_/g')
          FILENAME=SockFinder-${SANITIZED_BRANCH}-${OS}-${ARCH}
          [[ $OS == "windows" ]] && FILENAME="${FILENAME}.exe"
          GOOS=$OS GOARCH=$ARCH go build -o $FILENAME . || { echo "Build failed for $OS/$ARCH"; continue; }
          DEST_DIR=$ARTIFACTS_DIR/${OS}-${ARCH}
          mkdir -p $DEST_DIR
          mv $FILENAME $DEST_DIR/
      env:
        BRANCHES: ${{ env.BRANCHES }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.os }}-${{ matrix.arch }}
        path: ./release-artifacts-${{ github.run_id }}/${{ matrix.os }}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./release-artifacts

    - name: Archive all artifacts
      shell: bash
      run: |
        FINAL_ARTIFACTS_DIR=./final-release-artifacts
        mkdir -p $FINAL_ARTIFACTS_DIR
        for ARTIFACT in ./release-artifacts/*; do
          ARCHIVE_FILE=${FINAL_ARTIFACTS_DIR}/$(basename $ARTIFACT).tar.gz
          tar -czf $ARCHIVE_FILE -C $ARTIFACT .
          echo "Created archive: $ARCHIVE_FILE"
        done

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./final-release-artifacts/*.tar.gz
        tag_name: ${{ inputs.version }}
        name: ${{ inputs.version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
