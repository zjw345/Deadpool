name: Manual Go Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: '请输入版本号 (如 v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get all branches
      run: |
        echo "BRANCHES=$(git branch -r | grep -v '\->' | sed 's/origin\///' | tr '\n' ' ')" >> $GITHUB_ENV

    - name: Build binaries
      run: |
        mkdir -p ./release-artifacts/${{ matrix.os }}-${{ matrix.arch }}
        for BRANCH in $BRANCHES; do
          echo "Building branch: $BRANCH"
          git checkout $BRANCH
          FILENAME=SockFinder-${BRANCH}-${{ matrix.os }}-${{ matrix.arch }}
          [[ "${{ matrix.os }}" == "windows" ]] && FILENAME="${FILENAME}.exe"
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o $FILENAME .
          mv $FILENAME ./release-artifacts/${{ matrix.os }}-${{ matrix.arch }}/
        done

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ matrix.os }}-${{ matrix.arch }}
        path: ./release-artifacts/${{ matrix.os }}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./release-artifacts

    - name: Archive binaries
      run: |
        OUTPUT_DIR=./final-release-artifacts
        mkdir -p $OUTPUT_DIR
        for OS_ARCH_DIR in ./release-artifacts/*; do
          OS_ARCH=$(basename $OS_ARCH_DIR)
          tar -czf $OUTPUT_DIR/SockFinder-${OS_ARCH}-${{ github.run_id }}.tar.gz -C $OS_ARCH_DIR .
        done

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./final-release-artifacts/*.tar.gz
        tag_name: ${{ inputs.version }}
        name: ${{ inputs.version }}
        draft: false
        prerelease: false
        overwrite: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
